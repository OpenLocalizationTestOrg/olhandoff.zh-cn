<?xml version="1.0" encoding="utf-8"?>
<xliff srcLang="en-US" trgLang="zh-cn" version="2.0" xmlns="urn:oasis:names:tc:xliff:document:2.0" xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationpriority">
        </mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">d08207277e33d542ce0dd971bf1ab4e5e5ea69cb</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source xml:space="preserve">Keep the UI thread responsive!</source>
          <target xml:space="preserve">Keep the UI thread responsive!</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source xml:space="preserve">\[ Updated for UWP apps on Windows 10.</source>
          <target xml:space="preserve">\[ Updated for UWP apps on Windows 10.</target>
        </segment>
      </unit>
      <unit id="103">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
          <target xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source xml:space="preserve">Users expect an app to remain responsive while it does computation, regardless of the type of machine.</source>
          <target xml:space="preserve">Users expect an app to remain responsive while it does computation, regardless of the type of machine.</target>
        </segment>
      </unit>
      <unit id="105">
        <segment state="initial">
          <source xml:space="preserve">This means different things for different apps.</source>
          <target xml:space="preserve">This means different things for different apps.</target>
        </segment>
      </unit>
      <unit id="106">
        <segment state="initial">
          <source xml:space="preserve">For some, this translates to providing more realistic physics, loading data from disk or the web faster, quickly presenting complex scenes and navigating between pages, finding directions in a snap, or rapidly processing data.</source>
          <target xml:space="preserve">For some, this translates to providing more realistic physics, loading data from disk or the web faster, quickly presenting complex scenes and navigating between pages, finding directions in a snap, or rapidly processing data.</target>
        </segment>
      </unit>
      <unit id="107">
        <segment state="initial">
          <source xml:space="preserve">Regardless of the type of computation, users want their app to act on their input and eliminate instances where it appears unresponsive while it "thinks".</source>
          <target xml:space="preserve">Regardless of the type of computation, users want their app to act on their input and eliminate instances where it appears unresponsive while it "thinks".</target>
        </segment>
      </unit>
      <unit id="108">
        <segment state="initial">
          <source xml:space="preserve">Your app is event-driven, which means that your code performs work in response to an event and then it sits idle until the next.</source>
          <target xml:space="preserve">Your app is event-driven, which means that your code performs work in response to an event and then it sits idle until the next.</target>
        </segment>
      </unit>
      <unit id="109">
        <segment state="initial">
          <source xml:space="preserve">Platform code for UI (layout, input, raising events, etc.) and your app’s code for UI all are executed on the same UI thread.</source>
          <target xml:space="preserve">Platform code for UI (layout, input, raising events, etc.) and your app’s code for UI all are executed on the same UI thread.</target>
        </segment>
      </unit>
      <unit id="110">
        <segment state="initial">
          <source xml:space="preserve">Only one instruction can execute on that thread at a time so if your app code takes too long to process an event then the framework can’t run layout or raise new events representing user interaction.</source>
          <target xml:space="preserve">Only one instruction can execute on that thread at a time so if your app code takes too long to process an event then the framework can’t run layout or raise new events representing user interaction.</target>
        </segment>
      </unit>
      <unit id="111">
        <segment state="initial">
          <source xml:space="preserve">The responsiveness of your app is related to the availability of the UI thread to process work.</source>
          <target xml:space="preserve">The responsiveness of your app is related to the availability of the UI thread to process work.</target>
        </segment>
      </unit>
      <unit id="112">
        <segment state="initial">
          <source xml:space="preserve">You need to use the UI thread to make almost all changes to the UI thread, including creating UI types and accessing their members.</source>
          <target xml:space="preserve">You need to use the UI thread to make almost all changes to the UI thread, including creating UI types and accessing their members.</target>
        </segment>
      </unit>
      <unit id="113">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Hh750317)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">You can't update the UI from a background thread but you can post a message to it with <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CoreDispatcher.RunAsync</pc></pc> to cause code to be run there.</source>
          <target xml:space="preserve">You can't update the UI from a background thread but you can post a message to it with <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CoreDispatcher.RunAsync</pc></pc> to cause code to be run there.</target>
        </segment>
      </unit>
      <unit id="114">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  The one exception is that there's a separate render thread that can apply UI changes that won't affect how input is handled or the basic layout.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  The one exception is that there's a separate render thread that can apply UI changes that won't affect how input is handled or the basic layout.</target>
        </segment>
      </unit>
      <unit id="115">
        <segment state="initial">
          <source xml:space="preserve">For example many animations and transitions that don’t affect layout can run on this render thread.</source>
          <target xml:space="preserve">For example many animations and transitions that don’t affect layout can run on this render thread.</target>
        </segment>
      </unit>
      <unit id="116">
        <segment state="initial">
          <source xml:space="preserve">Delay element instantiation</source>
          <target xml:space="preserve">Delay element instantiation</target>
        </segment>
      </unit>
      <unit id="117">
        <segment state="initial">
          <source xml:space="preserve">Some of the slowest stages in an app can include startup, and switching views.</source>
          <target xml:space="preserve">Some of the slowest stages in an app can include startup, and switching views.</target>
        </segment>
      </unit>
      <unit id="118">
        <segment state="initial">
          <source xml:space="preserve">Don't do more work than necessary to bring up the UI that the user sees initially.</source>
          <target xml:space="preserve">Don't do more work than necessary to bring up the UI that the user sees initially.</target>
        </segment>
      </unit>
      <unit id="119">
        <segment state="initial">
          <source xml:space="preserve">For example, don't create the UI for progressively-disclosed UI and the contents of popups.</source>
          <target xml:space="preserve">For example, don't create the UI for progressively-disclosed UI and the contents of popups.</target>
        </segment>
      </unit>
      <unit id="120">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Mt204785)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:DeferLoadStrategy</pc> to delay-instantiate elements.</source>
          <target xml:space="preserve">Use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:DeferLoadStrategy</pc> to delay-instantiate elements.</target>
        </segment>
      </unit>
      <unit id="121">
        <segment state="initial">
          <source xml:space="preserve">Programmatically insert elements into the tree on-demand.</source>
          <target xml:space="preserve">Programmatically insert elements into the tree on-demand.</target>
        </segment>
      </unit>
      <unit id="122">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Hh967918)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">CoreDispatcher.RunIdleAsync</pc>
						</pc> queues work for the UI thread to process when it's not busy.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">CoreDispatcher.RunIdleAsync</pc>
						</pc> queues work for the UI thread to process when it's not busy.</target>
        </segment>
      </unit>
      <unit id="123">
        <segment state="initial">
          <source xml:space="preserve">Use asynchronous APIs</source>
          <target xml:space="preserve">Use asynchronous APIs</target>
        </segment>
      </unit>
      <unit id="124">
        <segment state="initial">
          <source xml:space="preserve">To help keep your app responsive, the platform provides asynchronous versions of many of its APIs.</source>
          <target xml:space="preserve">To help keep your app responsive, the platform provides asynchronous versions of many of its APIs.</target>
        </segment>
      </unit>
      <unit id="125">
        <segment state="initial">
          <source xml:space="preserve">An asynchronous API ensures that your active execution thread never blocks for a significant amount of time.</source>
          <target xml:space="preserve">An asynchronous API ensures that your active execution thread never blocks for a significant amount of time.</target>
        </segment>
      </unit>
      <unit id="126">
        <segment state="initial">
          <source xml:space="preserve">When you call an API from the UI thread, use the asynchronous version if it's available.</source>
          <target xml:space="preserve">When you call an API from the UI thread, use the asynchronous version if it's available.</target>
        </segment>
      </unit>
      <unit id="127">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/Mt187335)</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/Mt187337)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For more info about programming with <pc dataRefEnd="id2" dataRefStart="id1" id="p1">async</pc> patterns, see <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Asynchronous programming</pc> or <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Call asynchronous APIs in C\# or Visual Basic</pc>.</source>
          <target xml:space="preserve">For more info about programming with <pc dataRefEnd="id2" dataRefStart="id1" id="p1">async</pc> patterns, see <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Asynchronous programming</pc> or <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Call asynchronous APIs in C\# or Visual Basic</pc>.</target>
        </segment>
      </unit>
      <unit id="128">
        <segment state="initial">
          <source xml:space="preserve">Offload work to background threads</source>
          <target xml:space="preserve">Offload work to background threads</target>
        </segment>
      </unit>
      <unit id="129">
        <segment state="initial">
          <source xml:space="preserve">Write event handlers to return quickly.</source>
          <target xml:space="preserve">Write event handlers to return quickly.</target>
        </segment>
      </unit>
      <unit id="130">
        <segment state="initial">
          <source xml:space="preserve">In cases where a non-trivial amount of work needs to be performed, schedule it on a background thread and return.</source>
          <target xml:space="preserve">In cases where a non-trivial amount of work needs to be performed, schedule it on a background thread and return.</target>
        </segment>
      </unit>
      <unit id="131">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">You can schedule work asynchronously by using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">await</pc> operator in C\#, the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Await</pc> operator in Visual Basic, or delegates in C++.</source>
          <target xml:space="preserve">You can schedule work asynchronously by using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">await</pc> operator in C\#, the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Await</pc> operator in Visual Basic, or delegates in C++.</target>
        </segment>
      </unit>
      <unit id="132">
        <segment state="initial">
          <source xml:space="preserve">But this doesn't guarantee that the work you schedule will run on a background thread.</source>
          <target xml:space="preserve">But this doesn't guarantee that the work you schedule will run on a background thread.</target>
        </segment>
      </unit>
      <unit id="133">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Many of the Universal Windows Platform (UWP) APIs schedule work in the background thread for you, but if you call your app code by using only <pc dataRefEnd="id2" dataRefStart="id1" id="p1">await</pc> or a delegate, you run that delegate or method on the UI thread.</source>
          <target xml:space="preserve">Many of the Universal Windows Platform (UWP) APIs schedule work in the background thread for you, but if you call your app code by using only <pc dataRefEnd="id2" dataRefStart="id1" id="p1">await</pc> or a delegate, you run that delegate or method on the UI thread.</target>
        </segment>
      </unit>
      <unit id="134">
        <segment state="initial">
          <source xml:space="preserve">You have to explicitly say when you want to run your app code on a background thread.</source>
          <target xml:space="preserve">You have to explicitly say when you want to run your app code on a background thread.</target>
        </segment>
      </unit>
      <unit id="135">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/en-us/library/windows/apps/xaml/system.threading.tasks.task.run.aspx)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">In C\#C\# and Visual Basic you can accomplish this by passing code to <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Task.Run</pc></pc>.</source>
          <target xml:space="preserve">In C\#C\# and Visual Basic you can accomplish this by passing code to <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Task.Run</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="136">
        <segment state="initial">
          <source xml:space="preserve">Remember that UI elements may only be accessed from the UI thread.</source>
          <target xml:space="preserve">Remember that UI elements may only be accessed from the UI thread.</target>
        </segment>
      </unit>
      <unit id="137">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Hh750317)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/Hh967918)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Use the UI thread to access UI elements before launching the background work and/or use <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CoreDispatcher.RunAsync</pc></pc> or <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">CoreDispatcher.RunIdleAsync</pc></pc> on the background thread.</source>
          <target xml:space="preserve">Use the UI thread to access UI elements before launching the background work and/or use <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CoreDispatcher.RunAsync</pc></pc> or <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">CoreDispatcher.RunIdleAsync</pc></pc> on the background thread.</target>
        </segment>
      </unit>
      <unit id="138">
        <segment state="initial">
          <source xml:space="preserve">An example of work that can be performed on a background thread is the calculating of computer AI in a game.</source>
          <target xml:space="preserve">An example of work that can be performed on a background thread is the calculating of computer AI in a game.</target>
        </segment>
      </unit>
      <unit id="139">
        <segment state="initial">
          <source xml:space="preserve">The code that calculates the computer's next move can take a lot of time to execute.</source>
          <target xml:space="preserve">The code that calculates the computer's next move can take a lot of time to execute.</target>
        </segment>
      </unit>
      <unit id="140">
        <segment state="initial">
          <source xml:space="preserve">[!div class="tabbedCodeSnippets"]</source>
          <target xml:space="preserve">[!div class="tabbedCodeSnippets"]</target>
        </segment>
      </unit>
      <unit id="141">
        <originalData>
          <data id="id1">`NextMove-Click`</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">In this example, the <ph dataRef="id1" id="ph1" /> handler returns at the <pc dataRefEnd="id3" dataRefStart="id2" id="p1">await</pc> in order to keep the UI thread responsive.</source>
          <target xml:space="preserve">In this example, the <ph dataRef="id1" id="ph1" /> handler returns at the <pc dataRefEnd="id3" dataRefStart="id2" id="p1">await</pc> in order to keep the UI thread responsive.</target>
        </segment>
      </unit>
      <unit id="142">
        <originalData>
          <data id="id1">`ComputeNextMove`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">But execution picks up in that handler again after <ph dataRef="id1" id="ph1" /> (which executes on a background thread) completes.</source>
          <target xml:space="preserve">But execution picks up in that handler again after <ph dataRef="id1" id="ph1" /> (which executes on a background thread) completes.</target>
        </segment>
      </unit>
      <unit id="143">
        <segment state="initial">
          <source xml:space="preserve">The remaining code in the handler updates the UI with the results.</source>
          <target xml:space="preserve">The remaining code in the handler updates the UI with the results.</target>
        </segment>
      </unit>
      <unit id="144">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/BR229621)</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
          <data id="id7">[</data>
          <data id="id8">](https://msdn.microsoft.com/library/windows/apps/BR229621timer)</data>
          <data id="id9">**</data>
          <data id="id10">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  There's also a <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">ThreadPool</pc></pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">ThreadPoolTimer</pc></pc> API for the UWP, which can be used for similar scenarios.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  There's also a <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">ThreadPool</pc></pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">ThreadPoolTimer</pc></pc> API for the UWP, which can be used for similar scenarios.</target>
        </segment>
      </unit>
      <unit id="145">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Mt187340)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Threading and async programming</pc>.</source>
          <target xml:space="preserve">For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Threading and async programming</pc>.</target>
        </segment>
      </unit>
      <unit id="146">
        <segment state="initial">
          <source xml:space="preserve">Related topics</source>
          <target xml:space="preserve">Related topics</target>
        </segment>
      </unit>
      <unit id="147">
        <segment state="initial">
          <source xml:space="preserve">Custom user interactions</source>
          <target xml:space="preserve">Custom user interactions</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>